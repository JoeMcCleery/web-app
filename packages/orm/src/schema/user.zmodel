import 'abstract/base'
import 'access-control'

model User extends Base {
  name          String         @encrypted @length(min: 1)
  email         String         @email @encrypted @unique
  emailHash     String         @unique @omit
  password      String         @password @omit @length(min: 8, max: 64)

  sessions      Session[]
  passwordReset PasswordReset?
  userRoles     UserRole[]

  // full access by self
  @@allow('all', auth() == this)
  // anyone can create users
  @@allow('create', true)

  @@allow('create', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'users']) && has(operations, 'create')]])
  @@allow('read', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'users']) && has(operations, 'read')]])
  @@allow('update', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'users']) && has(operations, 'update')]])
  @@allow('delete', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'users']) && has(operations, 'delete')]])
}

model Session extends Base {
  tokenHash String   @unique @omit
  expiresAt DateTime
  userId    String   @db.Uuid @default(auth().id)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // users manage own sessions
  @@allow('all', auth() == user)

  @@allow('create', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'users']) && has(operations, 'create')]])
  @@allow('read', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'users']) && has(operations, 'read')]])
  @@allow('update', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'users']) && has(operations, 'update')]])
  @@allow('delete', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'users']) && has(operations, 'delete')]])
}

model PasswordReset extends Base {
  otpCodeHash  String?  @omit
  otpTokenHash String?  @omit
  tokenHash    String   @unique @omit
  expiresAt    DateTime
  userId       String   @db.Uuid @unique @default(auth().id)

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // users manage own password resets
  @@allow('all', auth() == user)

  @@allow('create', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'users']) && has(operations, 'create')]])
  @@allow('read', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'users']) && has(operations, 'read')]])
  @@allow('update', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'users']) && has(operations, 'update')]])
  @@allow('delete', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'users']) && has(operations, 'delete')]])
}